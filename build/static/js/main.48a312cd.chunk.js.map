{"version":3,"sources":["Components/Controller.js","Components/PersonForm.js","Components/ShowFiltered.js","Components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","id","newObject","put","console","log","delete","PersonsFrom","props","showNotification","person","setNotification","name","number","setTimeout","showError","setErrormessage","changeNumber","a","persons","find","changedPerson","Controller","initialNotes","setPersons","onSubmit","event","preventDefault","userExists","findIndex","newName","numberExists","newNumber","concat","setNewName","setNewNumber","catch","error","JSON","stringify","showErrorFromDB","alert","window","confirm","value","onChange","target","type","ShowFiltered","filtered","filter","item","toLowerCase","includes","searchWord","removeUser","note_id","err","map","key","onClick","Filter","setSearchWord","App","useState","notification","errormessage","useEffect","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.48a312cd.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newPerson => {\n  const request = axios.post(baseUrl, newPerson)\n  return request.then(response => response.data)\n}\n\nconst delete_user = id => {\n    console.log(id)\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  delete_user : delete_user\n}","import React from 'react'\nimport Controller from './Controller'\n\n\nconst PersonsFrom = (props) => {\n\n    const addPersonToState = (event) => {\n    props.setNewName((event.target.value))\n    }\n\n    const addNumberToState = (event) => {\n    props.setNewNumber((event.target.value))\n    }\n\n    const showNotification = (person) =>  {\n      props.setNotification(\"Success! Name: \" + person.name + \", number: \" + person.number)\n      setTimeout(() => {\n        props.setNotification(\"\")\n      }, 4000)\n    }\n\n    const showError = (person) =>  {\n      props.setErrormessage(\"Whoops! \" + person.name + \" was already deleted.\")\n      setTimeout(() => {\n        props.setErrormessage(\"\")\n      }, 4000)\n    }\n\n    const showErrorFromDB = (error) =>  {\n      props.setErrormessage(JSON.stringify(error))\n      setTimeout(() => {\n        props.setErrormessage(\"\")\n      }, 4000)\n    }\n\n    const changeNumber = async (name, number) => {\n      const person = props.persons.find(person => person.name === name)\n      const id = person.id\n      const changedPerson = { ...person, number: number}\n      \n      try {\n      await Controller.update(id, changedPerson)\n      await Controller.getAll()\n        .then(initialNotes => {\n          props.setPersons(initialNotes)\n          showNotification(changedPerson)\n      })\n    } catch (err) {\n      console.log(err)\n      showError(changedPerson)\n    }\n    }\n\n    const addPerson = (event) => {\n    event.preventDefault()\n    const userExists = props.persons.findIndex(name => name.name === props.newName)\n    const numberExists = props.persons.findIndex(number => number.number === props.newNumber)\n\n\n    if (userExists === -1 && numberExists === -1) {\n    \n      const newPerson = {\n        name: props.newName,\n        number: props.newNumber,\n      }\n    \n      Controller\n      .create(newPerson)\n        .then(initialNotes => {\n          props.setPersons(props.persons.concat(initialNotes))\n          props.setNewName('')\n          props.setNewNumber('')\n            showNotification(initialNotes)\n        })\n        .catch(error => {\n          console.log(\"tuli catchiin\")\n          showErrorFromDB(error.response.data)\n        })\n  \n\n    } else if (numberExists !== -1) {\n    props.setNewName('')\n    props.setNewNumber('')\n    alert(`${props.newNumber} is already added to phonebook`)\n\n    } else if (userExists !== -1) {\n      if (window.confirm(\"Do you want to change number for \" + props.newName + \"?\")) { \n      changeNumber(props.newName, props.newNumber)\n      }\n    }\n\n    }\n\nreturn (\n\n<form onSubmit={addPerson}>\n<div>\n  name: <input \n  value={props.newName}\n  onChange={addPersonToState} \n  />\n</div>\n<div>\n  number: <input \n  value={props.newNumber}\n  onChange={addNumberToState} \n  />\n</div>\n<div>\n  <button type=\"submit\">add</button>\n</div>\n</form>\n)\n\n}\n\nexport default PersonsFrom;","import React from 'react'\nimport Controller from './Controller'\n\nconst ShowFiltered = (props) => {\n\n    const filtered = props.persons.filter(item => {\n        return item.name.toLowerCase().includes(props.searchWord.toLowerCase());\n      });\n\n  const showNotification = (person) =>  {\n        props.setNotification(\"Success! \" + person + \" was deleted\")\n        setTimeout(() => {\n          props.setNotification(\"\")\n        }, 4000)\n      }\n      \nconst removeUser = (note_id, name) => {\n    if (window.confirm(\"Remove \" + name + \"?\")) { \n    try {\n    Controller.delete_user(note_id)\n    .then (\n        Controller\n        .getAll()\n          .then(initialNotes => {\n            props.setPersons(initialNotes.filter(person => person.id !== note_id))\n            showNotification(name)\n          }\n        )\n    )\n} catch (err) {\n    console.log(err)\n    }\n  }\n}\n    \nreturn (\n\n    filtered.map(name => <ul key = {name.name}>{name.name}, number {name.number}\n    <button onClick={() => removeUser(name.id, name.name)}\n    >Delete</button>\n    </ul>)\n    \n)\n}\n\nexport default ShowFiltered;\n\n\n","import React from 'react'\n\nconst Filter = (props) => {\n\n    const editSearchWord = (event) => {\n        props.setSearchWord((event.target.value))\n      }\n    \n\nreturn (\n    <p>Filter shown with <input value={props.searchWord} onChange={editSearchWord} ></input></p>\n)\n}\n\nexport default Filter;","import React, { useState, useEffect  } from 'react'\nimport PersonsForm from './Components/PersonForm'\nimport ShowFiltered from './Components/ShowFiltered'\nimport Filter from './Components/Filter'\nimport Controller from './Components/Controller'\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchWord, setSearchWord ] = useState('')\n  const [ notification, setNotification ] = useState('')\n  const [ errormessage, setErrormessage ] = useState('')\n\n\nuseEffect(() => {\n  Controller\n  .getAll()\n    .then(initialNotes => {\n      setPersons(initialNotes)\n  })\n}, [])\n\n  return (\n\n    <div>\n\n      <h2 className=\"notification\">{notification}</h2>\n      <h2 className=\"error\">{errormessage}</h2>\n\n      <h2>Phonebook</h2>\n\n      <Filter searchWord={searchWord} setSearchWord={setSearchWord}></Filter>\n\n      <h2>Add a new person</h2>\n\n      <PersonsForm newName={newName} setNewName={setNewName} \n      newNumber={newNumber} setNewNumber={setNewNumber} \n      persons={persons} setPersons={setPersons} \n      notification={notification} setNotification={setNotification}\n      errormessage={errormessage} setErrormessage={setErrormessage}/>\n\n      <h2>Numbers</h2>\n\n      <ShowFiltered persons={persons} \n      searchWord={searchWord} setPersons={setPersons} \n      notification={notification} setNotification={setNotification}\n      ></ShowFiltered>\n\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}